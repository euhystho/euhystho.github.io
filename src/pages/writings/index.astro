---
import { getCollection } from "astro:content";
import { filterPosts, getURL } from "../../utils/utils";
import BlogCard from "../../components/blog/blogCard.astro";
import BlogLayout from "../../components/layouts/BlogLayout.astro";
import Noposts from "src/components/blog/NoPosts.astro";

const contentType = "writings";
const allPosts = await getCollection(contentType);
const filteredPosts = filterPosts(allPosts);
---

<BlogLayout
  type={contentType}
  description="Explore my academic writings spanning current developments, ethics, and ongoing topics."
>
  {
    filteredPosts.length === 0 ? (
      <Noposts />
    ) : (
      filteredPosts.map((post) => (
        <BlogCard
          frontmatter={post.data}
          url={getURL(post.id, contentType)}
          type={contentType}
        />
      ))
    )
  }
</BlogLayout>
<style scoped>
  /* PageFind Properties */
  :root {
    --pagefind-ui-font: "Figtree", system-ui, sans-serif;
    --pagefind-ui-primary: var(--color-primary);
    --pagefind-ui-text: var(--color-text);
    --pagefind-ui-background: var(--color-background);
    --pagefind-ui-border: var(--color-accent);
    --pagefind-ui-tag: var(--color-secondary);
    --pagefind-ui-border-width: 1px;
    --pagefind-ui-border-radius: var(--radius-4xl);
  }
  /* Dark mode variables */
  html.dark {
    --pagefind-ui-primary: var(--color-accent);
    --pagefind-ui-text: var(--color-text);
    --pagefind-ui-background: var(--color-background);
    --pagefind-ui-border: var(--color-secondary);
    --pagefind-ui-tag: var(--color-secondary);
  }
  .pagefind-ui__search-input::placeholder {
    color: var(--color-text);
  }
</style>
<script is:inline data-astro-rerun>
  // Wait for PageFind UI to render, then attach listeners
  function setupPageFindFilterListeners() {
    // Use MutationObserver to wait for PageFind Search has been fully rendered
    const observer = new MutationObserver(() => {
      const filterCheckboxes = document.querySelectorAll(
        ".pagefind-ui__filter-checkbox",
      );

      if (filterCheckboxes.length > 0) {
        filterCheckboxes.forEach((checkbox) => {
          if (!checkbox.hasAttribute("data-listener-attached")) {
            checkbox.addEventListener("change", handleFilterChange);
            checkbox.setAttribute("data-listener-attached", "true");
          }
        });
      }
    });

    // Start observing
    const searchContainer = document.querySelector("#search");
    if (searchContainer) {
      observer.observe(searchContainer, {
        childList: true,
        subtree: true,
      });
    }
  }

  function handleFilterChange() {
    // Get all currently checked filters
    const checkedFilters = getActiveFilters();

    // Filter posts based on active filters
    filterPosts(checkedFilters);
  }

  function getActiveFilters() {
    const activeFilters = {};
    const checkedBoxes = document.querySelectorAll(
      ".pagefind-ui__filter-checkbox:checked",
    );

    checkedBoxes.forEach((checkbox) => {
      const filterName = checkbox.name;
      const filterValue = checkbox.value;

      if (!activeFilters[filterName]) {
        activeFilters[filterName] = [];
      }
      activeFilters[filterName].push(filterValue);
    });

    return activeFilters;
  }

  function filterPosts(activeFilters) {
    const allCards = document.querySelectorAll("[data-blog-card]");

    if (Object.keys(activeFilters).length === 0) {
      // Show all cards when no filters active
      allCards.forEach((card) => (card.style.display = "block"));
      return;
    }

    allCards.forEach((card) => {
      const shouldShow = checkCardMatchesFilters(card, activeFilters);
      card.style.display = shouldShow ? "block" : "none";
    });
  }

  function checkCardMatchesFilters(card, activeFilters) {
    const cardCategory = card.getAttribute("data-category") || "";

    // Check if card matches active category filters
    if (activeFilters.category && activeFilters.category.length > 0) {
      return activeFilters.category.includes(cardCategory);
    }

    return true;
  }

  // Initialize when page has loaded
  document.addEventListener("astro:page-load", setupPageFindFilterListeners);
</script>
