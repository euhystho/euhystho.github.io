---
import { getCollection } from "astro:content";
import type { ContentType } from "../../utils/consts";
import { Image } from "astro:assets";
interface Props {
  type: ContentType; // "projects" or "writings"
}

const { type } = Astro.props as Props;

// Content configurations based on type
const contentConfig: Record<
  ContentType,
  {
    title: string;
    description: string;
    viewAllText: string;
    viewAllLink: string;
    itemLinkText: string;
  }
> = {
  projects: {
    title: "Featured Projects",
    description:
      "A selection of projects that showcase my growth as a developer: from passionate first attempts to sophisticated solutions that solve real problems.",
    viewAllText: "View All Projects",
    viewAllLink: "/projects",
    itemLinkText: "Read the story",
  },
  writings: {
    title: "Featured Writings",
    description:
      "A collection of my thoughts, experiences, and insights on software development, data science, and personal growth.",
    viewAllText: "View All Writings",
    viewAllLink: "/writings",
    itemLinkText: "Read article",
  },
};

// Get current content config
const config = contentConfig[type];

// Get featured items
const allItems = await getCollection(type);
const featuredItems = allItems
  .filter((item) => item.data.featured)
  .sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf())
  .slice(0, 3); // Show top 3 featured items
---

{
  featuredItems.length > 0 && (
    <section
      class="bg-secondary/50 dark:bg-secondary/5 rounded-4xl py-16"
      id={`featured-${type}`}
    >
      <div class="container mx-auto max-w-6xl px-4">
        {/* Details about the Featured Posts */}
        <div class="mb-12 text-center">
          <h2 class="font-heading dark:text-accent text-primary mb-4 text-3xl md:text-5xl">
            {config.title}
          </h2>
          <p class="text-text mx-auto max-w-3xl text-lg">
            {config.description}
          </p>
        </div>

        <div class="grid gap-8 md:grid-cols-2 lg:grid-cols-3">
          {featuredItems.map((item) => (
            <article class="group bg-background overflow-hidden rounded-2xl shadow-lg transition-all duration-300 hover:shadow-xl">
              {/* Item Image */}
              {"image" in item.data && item.data.image && (
                <div class="relative h-48 overflow-hidden">
                  <Image
                    src={item.data.image}
                    alt={item.data.title}
                    width={600}
                    height={300}
                    class="h-full w-full object-cover transition-transform duration-300 group-hover:scale-95 group-hover:rounded-t-3xl"
                  />

                </div>
              )}
              {/* Item Content */}
              <div class="p-6">
                <a href={`/${type}/${item.id}`}>
                  <h3 class="font-heading text-text group-hover:text-accent dark:group-hover:text-accent mb-3 cursor-pointer text-center text-xl transition-colors">
                    {item.data.title}
                  </h3>
                </a>

                <p class="text-text mb-4 text-base leading-relaxed max-md:text-center">
                  {item.data.description.length > 121
                    ? item.data.description.substring(0, 121) + "..."
                    : item.data.description}
                </p>

                {/* Key Tags */}
                <div class="mb-4 flex flex-wrap gap-2 max-md:justify-center">
                  {item.data.tags.slice(0, 3).map((tag) => (
                    <span class="bg-accent/20 text-text rounded px-2 py-1 text-xs">
                      {tag}
                    </span>
                  ))}
                </div>
                <div class="max-md:text-center">
                  <a
                    href={`/${type}/${item.id}`}
                    class="text-text group-hover:text-accent inline-flex items-center gap-2 text-sm font-semibold transition-colors"
                  >
                    {config.itemLinkText}
                    <svg
                      class="h-4 w-4"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M17 8l4 4m0 0l-4 4m4-4H3"
                      />
                    </svg>
                  </a>
                </div>
              </div>
            </article>
          ))}
        </div>
        <div class="mt-12 text-center">
          <a
            href={config.viewAllLink}
            class="text-text hover:text-accent inline-flex items-center gap-2 font-semibold transition-colors"
          >
            {config.viewAllText}
            <svg
              class="h-4 w-4"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M17 8l4 4m0 0l-4 4m4-4H3"
              />
            </svg>
          </a>
        </div>
      </div>
    </section>
  )
}
